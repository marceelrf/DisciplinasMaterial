---
title: "Sequenciamento de Terceira Geração com Oxford Nanopore"
subtitle: "Bioinformática"
author: "Marcel Ferreira"
date: today
format:
  revealjs:
    theme: simple
    transition: fade
    transition-speed: slow
    width: 1500
    page-layout: full
    reference-location: document
    chalkboard: true
    footer: "marcel.ferreira@unesp.br"
    pointer:
      pointerSize: 16
      color: '#ff0800'
revealjs-plugins:
  - pointer
editor: visual
lang: pt-BR
slide-number: c/t
engine: knitr
---

## Bioinformática

-   NIH: "*Bioinformatics, as related to genetics and genomics, is a scientific subdiscipline that involves using computer technology to collect, store, analyze and disseminate biological data and information, such as DNA and amino acid sequences or annotations about those sequences.*"

::: aside
NIH: National Institute of Health
:::

## Bioinformática

-   NIH: "*Bioinformatics, as related to **genetics** and **genomics**, is a scientific subdiscipline that involves using computer technology to **collect**, **store**, **analyze** and **disseminate** biological data and information, such as **DNA** and **amino acid sequences** or annotations about those sequences.*"

::: aside
NIH: National Institute of Health
:::

## Oxford Nanopore

![Principio do sequenciamento ONT](images/ont_prinmods.png){fig-align="center" width="1250"}

## Oxford Nanopore

## Fluxograma

![Bioinformatics Pipeline](Mermaid%20Chart%20-%20Create%20complex,%20visual%20diagrams%20with%20text.%20A%20smarter%20way%20of%20creating%20diagrams.-2025-07-23-163425.svg){fig-align="center" width="1150"}

## Basecalling

-   Procedimento no qual o sinal elétrico (`.pod5`) é convertido em bases (`.fastq` \| `.bam`);

-   Momento crucial onde se define o perfil da análise que será realizada;

-   Erros aqui prejudicam todas as demais análises;

-   `Dorado`;

## Basecalling - `Dorado`

-   Contem diversos modelos:
    -   chamada de bases;
    -   modificação de bases;
    -   polimento;
    -   variantes;

## Comando `dorado`

```{bash eval=FALSE, echo = TRUE}
> dorado --help
Usage: dorado [options] subcommand

Positional arguments:
aligner
basecaller
correct
demux
download
duplex
summary
trim

Optional arguments:
-h --help               shows help message and exits
-v --version            prints version information and exits
-vv                     prints verbose version information and exits
```

## Qual modelo usar?

```{bash eval=FALSE, echo=TRUE}
{analyte}_{pore}_{chemistry}_{speed}@version
```

-   `analyte`: DNA ou RNA?

-   `pore`: Qual técnologia de poro? (`R10.4.1`/`R9.4.1`)

-   `chemistry`: Qual kit foi utilizado foi utilizado?

-   `speed`: Velocidade de leitura durante o sequenciamento (DNA 400bps)

-   `version`: Versão do modelo

## Modelos `dorado`

```{bash eval=FALSE, echo = TRUE}
# Ver os modelos disponíveis
dorado download --list

# Baixar o desejado na pasta desejada
dorado download --model {modelo} --models-directory {PATH}
```

## Modelos `dorado`

-   `FAST`: Mais rápido e com menor acurácia;

-   `HAC`: Alta acurácia;

-   `SUP`: Super acurácia (maior requisito computacional);

::: callout-tip
## Para escolher seu modelo.

Modelo `SUP` é uma vantagem em situações de construção de genomas de referência;

Para demais situações o `HAC` já é suficiente;
:::

## `dorado` `basecaller`

```{bash eval=FALSE, echo = TRUE}
# chamada HAC sem modificações
dorado basecaller hac {/path/to/reads.pod5} > calls.bam

#chamada HAC com modificações 6mA e 5mC e 5hmC em CpG
dorado basecaller hac,6mA,5mCG_5hmCG {/path/to/reads.pod5} > calls.bam
```

## `dorado` `basecaller`

-   O padrão é salvar como `BAM`;

    -   Isso vai permitir salvar as modificações de base;

-   A performance ideal requer GPU;

    -   Usar a tag `--device "cuda:all"`;

-   Para gerar `fastq` usar `–emit-fastq`;

-   Para novos modelos é necessário utilizar `–emit-moves`;

-   É possível chamar e alinhar ao genoma de referência usando `--reference`;

## `dorado` `basecaller`

::: callout-note
## Tempo de processamento

\~ 12 horas de chamada de base + alinhamento utilizando GPU RTX 4060;

`{model}` precisa ser o caminho completo;

```{bash eval=FALSE, echo=TRUE}
dorado basecaller --recursive --trim "all" --modified-bases 5mCG_5hmCG 6mA --reference {fasta} {modelo} pod5/ --device "cuda:all" > calls.bam
```
:::

## QC

-   `FASTQC` tambem funciona;

-   `NanoPack2` é a atual melhor opção;

    -   `NanoPlot` para visualização das estatísticas;

    -   `Chopper` para trimagem (FASTQ);

## NanoPlot

-   FASTQ ou BAM;

-   Qualidade (`Q`);

-   Tamanho (`L`);

-   N50;

[![](https://hoytpr.github.io/bioinformatics-semester/fig/N50.png){fig-align="center" width="615"}](https://hoytpr.github.io/bioinformatics-semester/materials/genomics-assembly-reporting/)

## NanoPlot

```{bash eval=FALSE, echo=TRUE}
NanoPlot -t {threads} {--fastq/--bam} {files} -o {OUTPUT_DIR_NAME}
```

![Exemplo de gráfico](https://github.com/wdecoster/NanoPlot/raw/master/examples/scaled_Log_Downsampled_LengthvsQualityScatterPlot_kde.png){fig-align="center" width="850"}

## Chopper

```{bash eval=FALSE, echo=TRUE}
chopper -q 20 -l 1000 reads.fastq > trimmed_reads.fastq 
```

## Samtools

-   Filtrar o bam usando samtools (v1.17+):

```{bash eval=FALSE, echo=TRUE}
samtools view \
    --threads 16 \
    --bam --with-header \
    --min-qlen 500 \
    --min-MQ 10 \
    --exclude-flags 260 \
    --expr "avg(qual) >= 20 && qlen >= 1000" \
    {infile} > {outfile}
```

## Variantes

[![Variantes.](https://www.genome.gov/sites/default/files/inline-images/Genomic%20variation_INDELS%20DEL%20SNV%20TANDEM.png){fig-align="center" width="1000"}](https://www.genome.gov/about-genomics/educational-resources/fact-sheets/human-genomic-variation)

## Diferentes softwares

-   GATK;

-   DeepVariant;

-   Freebayes;

-   clair3;

-   samtools + Picard;

-   Entre outros...

## `freebayes`

-   Modelagem bayesiana;

-   Monta pequenos haplótipos;

-   Criado para short-reads;

-   Propenso a erros do tipo 1 (Falsos positivos);

-   Pode ser usado para uma ou várias amostras;

## Comando `freebayes`

```{bash eval=FALSE, echo=TRUE}
# Uma amostra
freebayes -f {REF} -t {REGIONS.BED} {amostra.bam} > var.vcf

# Multisample focando em uma região
ls *.bam > BAM_LIST.txt
freebayes -f {REF} -L {BAM_LIST.txt} -t {REGIONS.BED} > var.vcf
```

## `freebayes` não é paralelizavel

. . .

![](freebayes_sw.png){fig-align="center" width="1000"}

## `freebayes` não é paralelizavel

Parametros já testados:

-   Windows = 1000 bp;

-   Overlap = 50 bp;

-   Step size = 950 bp (1000 - 50);

## Combinando todos os arquivos

```{bash eval=FALSE, echo=TRUE}
for file in path/to/data/*.vcf; do
    bgzip -c "$file" > "$file.gz"
    tabix -p vcf "$file.gz"
done


bcftools concat --threads 14 --allow-overlaps --remove-duplicates -o ../merged.vcf.gz -Oz $(ls *.vcf.gz)
```

## Filtrando arquivos VCF

```{bash eval=FALSE, echo=TRUE}
# remove variantes de qualidade menor que 1
bcftools view --exclude 'QUAL<1' variantes.vcf > variantes_filtradas.vcf

# remove alelos alternativos que não apareceram
bcftools view --trim-alt-alleles variantes_filtradas.vcf > variantes_filtradas_trim.vcf

# remove variantes que não tenham nenhum alelo alternativo nas amostras
bcftools view --min-ac 1 variantes_filtradas_trim.vcf > variantes_filtradas_trim_minac.vcf

# normaliza o vcf com base no genoma de referência
bcftools norm -f hg38.fa variantes_filtradas_trim_minac.vcf > variantes_filtradas_trim_minac_norm.vcf
```

## `clair3`

-   Desenhada para dados de diferentes plataformas;

    -   ONT, PacBio, Illumina;

-   Usa deep learning;

-   Modos `pileup` e `full aligment` (`merge` combinação);

-   Roda uma amostra por vez;

    -   `--gvcf`;

## Comando `clair3`

-   Usando `bioconda`:

```{bash eval=FALSE, echo=TRUE}
MODEL_NAME="[YOUR_MODEL_NAME]"         # e.g. r1041_e82_400bps_sup_v500
THREADS=4
OUTPUT_DIR="ondesalvar"
run_clair3.sh \
  --bam_fn=input.bam \                 ## change your bam file name here
  --ref_fn=ref.fa \                    ## change your reference file name here
  --threads=${THREADS} \               ## maximum threads to be used
  --platform="ont" \                   ## options: {ont,hifi,ilmn}
  --model_path="${CONDA_PREFIX}/bin/models/${MODEL_NAME}" \ 
  --output=${OUTPUT_DIR} \              ## output path prefix 
  --sample_name="nomedaamostra" \
  --gvcf \
  --bed_fn= "genes_disciplina.bed"
```

## Multi amostras

-   `GLnexus`;

-   Modelo para usar \[[link](http://www.bio8.cs.hku.hk/clair3_trio/config/clair3.yml)\];

```{bash eval=FALSE, echo=TRUE}
# rodar o glnexus para juntar as amostras
glnexus_cli --config {clair3.yml} --threads 12 [1.gvcf, 2.gvcf, 3.gvcf...] > all_samples.bcf

# transformar em vcf
bcftools view -Ov -o all_samples.vcf all_samples.bcf
```

## Variantes estruturais (SV)

[![Variantes estruturais.](https://www.genome.gov/sites/default/files/inline-images/Genomic%20variation_Structral%20variants.png){fig-align="center" width="1000"}](https://www.genome.gov/about-genomics/educational-resources/fact-sheets/human-genomic-variation)

## Programas

-   Sniffles2;

<br>

-   SVIM;

<br>

-   [cuteSV](https://github.com/tjiangHIT/cuteSV);

## Sniffles2

-   Permite análise de TRIOS (Pais e filhos), populações (multiplas amostras) e mosaico;

```{bash eval=FALSE, echo=TRUE}
# Padrão
sniffles --input {amostra.bam} --snf {amostra.snf} --vcf {amostra.vcf}

#Multisample
sniffles --input {amostra1.snf} {amostra2.snf} ... --vcf {todasamostra.vcf}
```

## Faseamento

[![Vantagens no faseamento](https://wp.unil.ch/gtf/files/2020/05/EtNR1T.png){fig-align="center"}](https://wp.unil.ch/gtf/applications/)

## Programas

-   [WhatsHap](https://whatshap.readthedocs.io/en/latest/);

<br>

-   [Longphase](https://github.com/twolinin/longphase);

<br>

-   [HapCUT2](https://github.com/vibansal/HapCUT2);

## WhatsHap

-   Permite trabalhar com \>1 amostra no vcf;

-   Não lida com variantes multialelicas;

-   Não lida com SVs;

```{bash eval=FALSE, echo=TRUE}
# Phase
whatshap phase --indels -o phased.vcf --reference=reference.fasta input.vcf input.bam

#Haplotag
whatshap haplotag -o haplotagged.bam --reference reference.fasta phased.vcf.gz alignments.bam
```

## Longphase

-   Permite apenas 1 amostra por vcf;

-   Suporta com SVs;

-   É capaz de utilizar a metilação para a fase;

```{bash eval=FALSE, echo=TRUE}
# Phase. --sv-file passa o vcf de SVs
longphase phase -s SNP.vcf -b alignment.bam -r reference.fasta -t 8  -o phased_prefix --indels --ont

# Haplotag 
longphase haplotag -r reference.fasta -s phased_snp.vcf --sv-file phased_sv.vcf -b alignment.bam -t 8 -o tagged_bam_prefix
```

### **Montadores de nova geração:**

-   **Shasta**: algoritmo de grafo string, extremamente rápido;

-   **Verkko**: híbrido ONT+HiFi, qualidade superior;

-   **Hifiasm**: originalmente para HiFi, adaptado para ONT;

-   **PECAT:** versátil, realiza correção e polimento;

## Programas

-   [PECAT](https://github.com/lemene/PECAT);

<br>

-   [Hifiasm](https://github.com/chhylp123/hifiasm);

## PECAT

-   Coleção de ferramentas;

-   minimap2;

-   clair3;

-   medaka;

## PECAT

![](pecat01.png){fig-align="center"}

## PECAT

```{bash eval=FALSE, echo=TRUE}
# Ver opções
pecat.pl

# Cria um arquivo texto com todos os parametros
pecat.pl config {cfg_name}

# Roda
pecat.pl unzip {cfg_name}
```

## Hifiasm

-   Desenhado para Hifi reads(PacBio), adaptado para ONT;

-   Gerar grafos;

-   Funciona para diploides;

-   Rápido;

## Alinhando os ctgs ao genoma de referencia

```{bash eval=FALSE, echo=TRUE}
#Juntar todos os ctgs num unico arquivo

# minimap asm20
minimap2 -t 10 -ax asm20 -B 2 -E 3,1 -O 6,100 --cs /path/to/genomes/reference.fasta OCA2_ctgs.fasta > OCA2_ctgs.sam

# Transformar em bam
samtools sort OCA2_ctgs.sam > OCA2_ctgs.bam
samtools index OCA2_ctgs.bam
```
